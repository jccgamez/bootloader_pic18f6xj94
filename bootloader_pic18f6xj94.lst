CCS PCH C Compiler, Version 5.085, 46831               30-sep.-19 17:06

               Filename:   D:\OneDrive\git\bootloader_pic18f6xj94\bootloader_pic18f6xj94.lst

               ROM used:   772 bytes (2%)
                           Largest free fragment is 31470
               RAM used:   4 (0%) at main() level
                           79 (2%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

*
0000:  NOP   
0002:  GOTO   0294
.................... #include "bootloader.h" 
.................... #define BOOTLOADER_PIC18F65J94 
.................... //#define BOOTLOADER_PIC18F458 
.................... //#define BOOTLOADER_PIC18F8722 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* PIC18F65J94 Bootloader                                                      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #ifdef BOOTLOADER_PIC18F65J94 
....................  
.................... #include <18F65J94.h> 
.................... //////////// Standard Header file for the PIC18F65J94 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F65J94 
*
00B0:  MOVF   FF2,W
00B2:  MOVWF  03
00B4:  BCF    FF2.7
00B6:  BSF    F7F.2
00B8:  MOVLB  F
00BA:  MOVLW  55
00BC:  MOVWF  F7E
00BE:  MOVLW  AA
00C0:  MOVWF  F7E
00C2:  BSF    F7F.1
00C4:  NOP   
00C6:  MOVF   03,W
00C8:  IORWF  FF2,F
00CA:  MOVLB  0
00CC:  RETURN 0
00CE:  MOVF   FF6,W
00D0:  ANDLW  3F
00D2:  MOVWF  00
00D4:  MOVLW  C0
00D6:  ANDWF  FF6,F
00D8:  TBLRD*-
00DA:  MOVFF  45,01
00DE:  TSTFSZ 00
00E0:  BRA    00F8
00E2:  MOVF   FF6,W
00E4:  ADDLW  01
00E6:  BNZ   00F8
00E8:  MOVLW  00
00EA:  ADDWFC FF7,W
00EC:  ANDLW  01
00EE:  BNZ   00F8
00F0:  BSF    F7F.4
00F2:  TBLRD*+
00F4:  RCALL  00B0
00F6:  TBLRD*-
00F8:  TSTFSZ 00
00FA:  BRA    010A
00FC:  MOVFF  FEE,FF5
0100:  MOVF   01,F
0102:  BZ    010C
0104:  TBLWT+*
0106:  DECF   01,F
0108:  BRA    0110
010A:  DECF   00,F
010C:  TBLRD+*
010E:  TBLWT*
0110:  MOVLW  3F
0112:  ANDWF  FF6,W
0114:  XORLW  3F
0116:  BNZ   00DE
0118:  RCALL  00B0
011A:  TSTFSZ 01
011C:  BRA    00DE
011E:  CLRF   FF8
0120:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=8 
....................  
.................... #FUSES WDT                    //No Watch Dog Timer 
.................... #FUSES WDT1024                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES FRC 
....................  
.................... #use delay(internal=32M) 
....................  
.................... #endif /* #ifdef BOOTLOADER_PIC18F458 */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* PIC18F458 Bootloader                                                      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #ifdef BOOTLOADER_PIC18F458 
....................  
.................... #include <18F458.h> 
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT128                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES H4                        //HS + 4x PLL 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES NOOSCSEN                  //Oscillator switching is disabled, main oscillator is source 
.................... #FUSES NOBROWNOUT                //No brownout reset 
.................... #FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES LVP                       //Low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
....................  
.................... #use delay(clock=40000000) 
....................  
.................... #endif /* #ifdef BOOTLOADER_PIC18F458 */ 
....................  
....................  
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* PIC18F8722 Bootloader                                                     */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #ifdef BOOTLOADER_PIC18F8722 
....................  
.................... #include <18F8722.h> 
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT128                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES H4                        //High speed osc with HW enabled 4X PLL 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES IESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOBROWNOUT                //No brownout reset 
.................... #FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES LVP                       //Low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES FCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES LPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES MCU                       //Microcontroller Mode 
.................... #FUSES NOWAIT                    //Wait selections unavailable for Table Reads or Table Writes 
.................... #FUSES BW16                      //16-bit external bus mode 
.................... #FUSES ABW20                     //20-bit Address bus 
.................... #FUSES ECCPE                     //Enhanced CCP PWM outpts multiplexed with RE6 thorugh RE3 
.................... #FUSES BBSIZ4K                   //4K words Boot Block size 
....................  
.................... #use delay(clock=40000000) 
....................  
.................... #endif /* #ifdef BOOTLOADER_PIC18F8722 */ 
....................  
.................... #include "types.h" 
.................... /*** FILEHEADER **************************************************************** 
....................  * 
....................  *	FILENAME:    types.h 
....................  *	DATE:        21.11.2004 
....................  *	AUTHOR:		 Christian Stadler 
....................  * 
....................  *	DESCRIPTION: Definition of common types. 
....................  * 
....................  ******************************************************************************/ 
....................  
.................... /*** HISTORY OF CHANGE ********************************************************* 
....................  * 
....................  *	$Log: /pic/_inc/types.h $ 
....................  *  
....................  * 3     1.11.10 11:42 Stadler 
....................  * - type definitons dependend on compiler 
....................  *  
....................  * 2     26.02.05 18:44 Stadler 
....................  * added bool type 
....................  *  
....................  ******************************************************************************/ 
....................  
.................... #ifndef _TYPES_H 
.................... #define _TYPES_H 
....................  
.................... /*---------------------------------------------------------------------------*/ 
.................... /* Type definitions for Microchip C18 Compiler                               */ 
.................... /*---------------------------------------------------------------------------*/ 
.................... #if defined(__18CXX) 
....................  
.................... typedef unsigned char bool; 
.................... typedef signed char sint8; 
.................... typedef signed int sint16; 
.................... typedef signed long sint32; 
.................... typedef unsigned char  uint8; 
.................... typedef unsigned int uint16; 
.................... typedef unsigned long uint32; 
....................  
.................... #endif /* #if defined(__18CXX) */ 
....................  
....................  
....................  
.................... /*---------------------------------------------------------------------------*/ 
.................... /* Type definitions for CCS C Compiler                                       */ 
.................... /*---------------------------------------------------------------------------*/ 
.................... #if (defined(__PCB__) || defined(__PCH__) || defined(__PCM__)) 
....................  
.................... typedef int1 bool; 
.................... typedef signed int8 sint8; 
.................... typedef signed int16 sint16; 
.................... typedef signed int32 sint32; 
.................... typedef unsigned int8  uint8; 
.................... typedef unsigned int16 uint16; 
.................... typedef unsigned int32 uint32; 
....................  
.................... #endif /* (defined(__PCB__) || defined(__PCH__) || defined(__PCM__)) */ 
....................  
.................... #endif /*_TYPES_H */ 
....................  
....................  
....................  
.................... /* enable the following line to support lower case charachters in HEX file */ 
.................... //#define BOOTLOADER_HEX_LOWERCASE 
....................  
.................... /* the following line enables the checksum check, disable to decrease the */ 
.................... /* bootloader size */ 
.................... #define BOOTLOADER_HEX_CHECKSUM 
....................  
.................... /* pin for booloader activation */ 
.................... #define BOOTLOADER_PIN      PIN_B0 
....................  
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* Intel HEX file record types                                               */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #define HEX_DATA_REC        0   /* data record */ 
.................... #define HEX_EOF_REC         1   /* end of file record */ 
.................... #define HEX_EXTADDR_REC     4   /* extened linear address record */ 
....................  
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* Intel HEX file section start offsets                                      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #define HEX_LEN_START       1   /* start of record length */ 
.................... #define HEX_ADDR_START      3   /* start of address */ 
.................... #define HEX_TYPE_START      7   /* start of record type */ 
.................... #define HEX_DATA_START      9   /* start of data */ 
....................  
.................... #define HEX_HEADER_LEN      4   /* lenght of lenght-, address- and type field in byte */ 
....................  
.................... #define HEX_LINE_LEN_MAX    50  /* maximum length a line in the HEX file */ 
....................  
....................  
.................... #define ACK                 0x06    /* positive acknowledge (ACK) */ 
.................... #define NAK                 0x15    /* negative acknowledge (NAK) */ 
....................  
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* Bootloader Address Mapping                                                */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #define BOOTLOADER_START        0x2A 
.................... #define BOOTLOADER_END          0x3FF 
.................... #define RESET_VECTOR            0x400 
.................... #define INTERRUPT_VECTOR_LOW    0x408 
.................... #define INTERRUPT_VECTOR_HIGH   0x418 
.................... #define APPLICATION_START       RESET_VECTOR 
....................  
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* UART Address Mapping                                                */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #ifdef BOOTLOADER_PIC18F65J94 
....................  
.................... #pin_select U4RX = PIN_D0 
.................... #pin_select U4TX = PIN_D1 
....................  
.................... #pin_select U2RX = PIN_D2 
.................... #pin_select U2TX = PIN_D3 
....................  
.................... #endif /* #ifdef BOOTLOADER_PIC18F458 */ 
....................  
....................  
....................  
....................  
.................... #ORG BOOTLOADER_START, BOOTLOADER_END auto=0 default 
....................  
.................... /* RS232 configuration */ 
.................... #use rs232(baud=9600,parity=N,UART2, bits=8) //  
*
00A4:  BTFSS  FA4.4
00A6:  BRA    00A4
00A8:  MOVLB  F
00AA:  MOVWF  x1D
00AC:  MOVLB  0
00AE:  RETURN 0
.................... //#use rs232(baud=115200,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* get_hexbyte                                                               */ 
.................... /* returns byte representation of 2 ASCII characters pointed to by *hex      */ 
.................... /* ========================================================================= */ 
.................... uint8 get_hexbyte(uint8 *hex) 
*
002A:  CLRF   4D
.................... { 
....................     uint8 i; 
....................     uint8 ret = 0; 
....................     uint8 ch; 
....................      
....................     for (i=0; i < 2; i++) 
002C:  CLRF   4C
002E:  MOVF   4C,W
0030:  SUBLW  01
0032:  BNC   006E
....................     { 
....................         restart_wdt();  
0034:  CLRWDT
....................         /* take care of HEX files where lower case letters are used */ 
....................         #ifdef BOOTLOADER_HEX_LOWERCASE 
....................         ch = toupper(*hex); 
....................         #else 
....................         ch = *hex; 
0036:  MOVFF  4A,FE9
003A:  MOVFF  4B,FEA
003E:  MOVFF  FEF,4E
....................         #endif 
....................          
....................         /* convert character to integer value */ 
....................         if (ch >= 'A') 
0042:  MOVF   4E,W
0044:  SUBLW  40
0046:  BC    0052
....................         { 
....................             ch = ch - 'A' + 10; 
0048:  MOVLW  41
004A:  SUBWF  4E,W
004C:  ADDLW  0A
004E:  MOVWF  4E
....................         } 
0050:  BRA    0056
....................         else 
....................         { 
....................             ch = ch - '0'; 
0052:  MOVLW  30
0054:  SUBWF  4E,F
....................         } 
....................         ret = (ret << 4) | ch; 
0056:  SWAPF  4D,W
0058:  MOVWF  00
005A:  MOVLW  F0
005C:  ANDWF  00,F
005E:  MOVF   00,W
0060:  IORWF  4E,W
0062:  MOVWF  4D
....................         hex++; 
0064:  INCF   4A,F
0066:  BTFSC  FD8.2
0068:  INCF   4B,F
006A:  INCF   4C,F
006C:  BRA    002E
....................     } 
....................      
....................     return (ret); 
006E:  MOVFF  4D,01
0072:  RETURN 0
.................... } 
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* check_checksum                                                            */ 
.................... /* calculates checksum for the received Intel HEX file line                  */ 
.................... /* return: 0 = checksum ok                                                   */ 
.................... /*         1 = checksum error                                                */ 
.................... /* ========================================================================= */ 
.................... #ifdef BOOTLOADER_HEX_CHECKSUM 
.................... uint8 check_checksum(uint8 *hex, uint8 reclen) 
0074:  CLRF   48
.................... { 
....................     uint8 checksum = 0; 
....................     uint8 i; 
....................  
....................     // add all byte values, incl. checksum! 
....................     for (i=0; i <= (reclen + HEX_HEADER_LEN); i++) 
0076:  CLRF   49
0078:  MOVLW  04
007A:  ADDWF  47,W
007C:  SUBWF  49,W
007E:  BZ    0082
0080:  BC    009E
....................     { 
....................         restart_wdt();  
0082:  CLRWDT
....................         checksum += get_hexbyte(hex); 
0084:  MOVFF  46,4B
0088:  MOVFF  45,4A
008C:  RCALL  002A
008E:  MOVF   01,W
0090:  ADDWF  48,F
....................         hex += 2; 
0092:  MOVLW  02
0094:  ADDWF  45,F
0096:  MOVLW  00
0098:  ADDWFC 46,F
009A:  INCF   49,F
009C:  BRA    0078
....................     } 
....................  
....................     // checksum is zero if checksum is correct 
....................     return (checksum); 
009E:  MOVFF  48,01
00A2:  RETURN 0
.................... } 
.................... #endif /* BOOTLOADER_HEX_CHECKSUM */ 
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* bootloader                                                                */ 
.................... /* the bootloader itself.                                                    */ 
.................... /* ========================================================================= */ 
.................... void bootloader(void) 
*
0122:  CLRF   0B
0124:  BCF    42.0
0126:  CLRF   44
0128:  CLRF   43
.................... { 
....................     uint32 addr; 
....................     uint16 addr_low; 
....................     uint8 addr_high = 0; 
....................     uint8 reclen; 
....................     uint8 rectype; 
....................     uint8 idx; 
....................     uint8 buffer[HEX_LINE_LEN_MAX]; 
....................     uint8 ch; 
....................     bool hexend = 0; 
....................      
....................     #if getenv("FLASH_ERASE_SIZE")>2 
....................     uint16 next_addr = 0; 
....................     #endif 
....................  
....................      
....................     /* until end of HEX file */ 
....................     restart_wdt(); 
012A:  CLRWDT
....................     while(hexend == 0) 
012C:  BTFSC  42.0
012E:  BRA    0292
....................     { 
....................         /* get one line of the HEX file via RS232 until we receive CR or */ 
....................         /* we reached the end of the buffer */ 
....................         restart_wdt(); 
0130:  CLRWDT
....................         idx = 0; 
0132:  CLRF   0E
....................         do 
....................         { 
....................              /* get one byte */ 
....................              ch = getch(); 
0134:  BTFSS  FA4.5
0136:  BRA    0134
0138:  MOVLB  F
013A:  MOVFF  F1E,41
....................              /* save to buffer */ 
....................              buffer[idx] = ch; 
013E:  CLRF   03
0140:  MOVF   0E,W
0142:  ADDLW  0F
0144:  MOVWF  FE9
0146:  MOVLW  00
0148:  ADDWFC 03,W
014A:  MOVWF  FEA
014C:  MOVFF  41,FEF
....................              /* increment buffer index */ 
....................              idx++; 
0150:  INCF   0E,F
....................         } 
....................         while(ch != 0x0A); 
0152:  MOVF   41,W
0154:  SUBLW  0A
0156:  BTFSC  FD8.2
0158:  BRA    015E
015A:  MOVLB  0
015C:  BRA    0134
....................  
....................  
....................         /* get record length */ 
....................         reclen = get_hexbyte(&buffer[HEX_LEN_START]); 
015E:  CLRF   4B
0160:  MOVLW  10
0162:  MOVWF  4A
0164:  MOVLB  0
0166:  RCALL  002A
0168:  MOVFF  01,0C
....................  
....................         /* check for proper checksum */ 
....................         #ifdef BOOTLOADER_HEX_CHECKSUM 
....................         if (check_checksum(&buffer[HEX_LEN_START], reclen) != 0) 
016C:  CLRF   46
016E:  MOVLW  10
0170:  MOVWF  45
0172:  MOVFF  0C,47
0176:  RCALL  0074
0178:  MOVF   01,F
017A:  BZ    0182
....................         { 
....................             /* checkum error - send negative acknowledge */ 
....................             putc(NAK); 
017C:  MOVLW  15
017E:  RCALL  00A4
....................         } 
0180:  BRA    0290
....................         else 
....................         #endif /* BOOTLOADER_HEX_CHECKSUM */ 
....................         { 
....................             /* checkum ok */ 
....................  
....................             /* get address */ 
....................             addr_low = make16(get_hexbyte(&buffer[HEX_ADDR_START]), 
....................                               get_hexbyte(&buffer[HEX_ADDR_START+2])); 
0182:  CLRF   4B
0184:  MOVLW  12
0186:  MOVWF  4A
0188:  RCALL  002A
018A:  MOVFF  01,45
018E:  CLRF   4B
0190:  MOVLW  14
0192:  MOVWF  4A
0194:  RCALL  002A
0196:  MOVFF  45,0A
019A:  MOVFF  01,09
....................  
....................             /* make 32 bit address */ 
....................             addr = make32(addr_high, addr_low); 
019E:  CLRF   08
01A0:  MOVFF  0B,07
01A4:  MOVFF  09,05
01A8:  MOVFF  0A,06
....................  
....................             /* get record type */ 
....................             rectype = get_hexbyte(&buffer[HEX_TYPE_START]); 
01AC:  CLRF   4B
01AE:  MOVLW  16
01B0:  MOVWF  4A
01B2:  RCALL  002A
01B4:  MOVFF  01,0D
....................              
....................             if (rectype == HEX_DATA_REC) 
01B8:  MOVF   0D,F
01BA:  BNZ   0272
....................             { 
....................                 /* only program code memory */ 
....................                 if ((addr_high < 0x30) && (addr >= RESET_VECTOR)) 
01BC:  MOVF   0B,W
01BE:  SUBLW  2F
01C0:  BNC   0270
01C2:  MOVF   08,F
01C4:  BNZ   01D0
01C6:  MOVF   07,F
01C8:  BNZ   01D0
01CA:  MOVF   06,W
01CC:  SUBLW  03
01CE:  BC    0270
....................                 { 
....................                     for (idx=0; idx < reclen; idx++) 
01D0:  CLRF   0E
01D2:  MOVF   0C,W
01D4:  SUBWF  0E,W
01D6:  BC    021E
....................                     { 
....................                         buffer[idx] = get_hexbyte(&buffer[HEX_DATA_START+(idx*2)]); 
01D8:  CLRF   03
01DA:  MOVF   0E,W
01DC:  ADDLW  0F
01DE:  MOVWF  01
01E0:  MOVLW  00
01E2:  ADDWFC 03,F
01E4:  MOVFF  01,45
01E8:  MOVFF  03,46
01EC:  BCF    FD8.0
01EE:  RLCF   0E,W
01F0:  ADDLW  09
01F2:  CLRF   03
01F4:  ADDLW  0F
01F6:  MOVWF  01
01F8:  MOVLW  00
01FA:  ADDWFC 03,F
01FC:  MOVFF  01,47
0200:  MOVFF  03,48
0204:  MOVFF  03,4B
0208:  MOVFF  01,4A
020C:  RCALL  002A
020E:  MOVFF  46,FEA
0212:  MOVFF  45,FE9
0216:  MOVFF  01,FEF
....................                     } 
....................  
....................                     #if getenv("FLASH_ERASE_SIZE") > getenv("FLASH_WRITE_SIZE") 
....................                     #if defined(__PCM__) 
021A:  INCF   0E,F
021C:  BRA    01D2
....................                     if ((addr_low!=next_addr)&&(addr_low&(getenv("FLASH_ERASE_SIZE")-1)!=0)) 
....................                     #else 
....................                     if ((addr_low!=next_addr)&&(addr_low&(getenv("FLASH_ERASE_SIZE")/2-1)!=0)) 
021E:  MOVF   43,W
0220:  SUBWF  09,W
0222:  BNZ   022A
0224:  MOVF   44,W
0226:  SUBWF  0A,W
0228:  BZ    024C
022A:  MOVF   09,W
022C:  ANDLW  01
022E:  MOVWF  00
0230:  CLRF   03
0232:  MOVF   00,W
0234:  IORWF  03,W
0236:  BZ    024C
....................                     #endif 
....................                         erase_program_eeprom(addr); 
0238:  BSF    FD0.6
023A:  MOVFF  07,FF8
023E:  MOVFF  06,FF7
0242:  MOVFF  05,FF6
0246:  BSF    F7F.4
0248:  RCALL  00B0
024A:  CLRF   FF8
....................                     next_addr = addr_low + 1; 
024C:  MOVLW  01
024E:  ADDWF  09,W
0250:  MOVWF  43
0252:  MOVLW  00
0254:  ADDWFC 0A,W
0256:  MOVWF  44
....................                     #endif 
....................                     write_program_memory(addr, buffer, reclen); 
0258:  MOVFF  07,FF8
025C:  MOVFF  06,FF7
0260:  MOVFF  05,FF6
0264:  CLRF   FEA
0266:  MOVLW  0F
0268:  MOVWF  FE9
026A:  MOVFF  0C,45
026E:  RCALL  00CE
....................                 } 
....................             } 
0270:  BRA    028C
....................             else if (rectype == HEX_EOF_REC) 
0272:  DECFSZ 0D,W
0274:  BRA    027A
....................             { 
....................                 hexend = 1; 
0276:  BSF    42.0
....................             } 
0278:  BRA    028C
....................             else if (rectype == HEX_EXTADDR_REC) 
027A:  MOVF   0D,W
027C:  SUBLW  04
027E:  BNZ   028C
....................             { 
....................                 /* to save resources, only take lower byte - this */ 
....................                 /* allows 24 bit addresses => enough for PIC18F */ 
....................                 //addr_high = make16(get_hexbyte(&buffer[HEX_DATA_START]), 
....................                 //                   get_hexbyte(&buffer[HEX_DATA_START+2])); 
....................                 addr_high = get_hexbyte(&buffer[HEX_DATA_START+2]); 
0280:  CLRF   4B
0282:  MOVLW  1A
0284:  MOVWF  4A
0286:  RCALL  002A
0288:  MOVFF  01,0B
....................             } 
....................              
....................             /* send positive acknowledge */ 
....................             putc(ACK); 
028C:  MOVLW  06
028E:  RCALL  00A4
....................         } 
0290:  BRA    012C
....................     } 
0292:  RETURN 0
.................... } 
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* application                                                               */ 
.................... /* dummy application.                                                        */ 
.................... /* ========================================================================= */ 
.................... #ORG APPLICATION_START, APPLICATION_START+0x100 
.................... void application(void) 
.................... { 
....................     while(1) 
....................     { 
....................       restart_wdt(); 
*
0400:  CLRWDT
0402:  BRA    0400
....................     } 
0404:  RETURN 0
.................... } 
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* main                                                                      */ 
.................... /* checks if bootloader shall be invoked or if it shall start the            */ 
.................... /* application program.                                                      */ 
.................... /* ========================================================================= */ 
.................... #ORG BOOTLOADER_START 
.................... void main() 
*
0294:  CLRF   FF8
0296:  BCF    FD0.7
0298:  MOVLB  E
029A:  MOVLW  55
029C:  MOVWF  F7E
029E:  MOVLW  AA
02A0:  MOVWF  F7E
02A2:  BCF    F66.6
02A4:  MOVLW  F5
02A6:  MOVWF  x2B
02A8:  MOVWF  x2D
02AA:  MOVLW  30
02AC:  MOVWF  x1C
02AE:  MOVLW  20
02B0:  MOVWF  x1D
02B2:  MOVLW  55
02B4:  MOVWF  F7E
02B6:  MOVLW  AA
02B8:  MOVWF  F7E
02BA:  BSF    F66.6
02BC:  CLRF   F9B
02BE:  CLRF   F64
02C0:  CLRF   F65
02C2:  CLRF   F66
02C4:  MOVLW  01
02C6:  MOVWF  FD3
02C8:  MOVLB  F
02CA:  BSF    x31.3
02CC:  MOVLW  40
02CE:  MOVWF  x1F
02D0:  MOVLW  03
02D2:  MOVWF  x20
02D4:  MOVLW  A6
02D6:  MOVWF  x32
02D8:  MOVLW  90
02DA:  MOVWF  x33
02DC:  MOVLB  E
02DE:  CLRF   xD9
02E0:  CLRF   xDA
02E2:  CLRF   xCE
02E4:  CLRF   x45
02E6:  CLRF   x46
02E8:  CLRF   x47
02EA:  BCF    x8D.7
02EC:  BCF    x8D.6
02EE:  BCF    x8D.5
02F0:  MOVLB  F
02F2:  CLRF   x53
02F4:  CLRF   x38
02F6:  CLRF   x37
.................... { 
....................     setup_adc(ADC_OFF); 
02F8:  BCF    FC1.7
....................     restart_wdt(); 
02FA:  CLRWDT
....................     if (!input(BOOTLOADER_PIN)) 
02FC:  BSF    F93.0
02FE:  BTFSC  F81.0
0300:  BRA    0308
....................     { 
....................         bootloader(); 
0302:  MOVLB  0
0304:  RCALL  0122
0306:  MOVLB  F
....................     } 
....................  
....................     #asm 
....................     goto RESET_VECTOR 
0308:  MOVLB  0
030A:  GOTO   0400
030E:  MOVLB  0
....................     #endasm 
.................... } 
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* isr_low                                                                   */ 
.................... /* remap interrupt vector low.                                               */ 
.................... /* ========================================================================= */ 
.................... #ORG 0x08, 0x17 
.................... void isr_low(void) 
0310:  SLEEP 
.................... { 
....................     #asm 
....................     goto INTERRUPT_VECTOR_LOW 
*
0008:  GOTO   0408
000C:  MOVLB  0
....................     #endasm 
000E:  RETURN 0
.................... } 
....................  
....................  
.................... /* ========================================================================= */ 
.................... /* isr_high                                                                  */ 
.................... /* remap interrupt vector high.                                              */ 
.................... /* ========================================================================= */ 
.................... #ORG 0x18, 0x29 
.................... void isr_high(void) 
.................... { 
....................     #asm 
....................     goto INTERRUPT_VECTOR_HIGH 
*
0018:  GOTO   0418
001C:  MOVLB  0
....................     #endasm 
001E:  RETURN 0
.................... } 

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FC81   FRC_PLL SOSC_DIG NOCLOCKOUT IESO PLL4X
   Word  3: F033   NOPR
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FFAF   WDTWIN_25% WDTCLK_FRC WDT1024 WDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
